---
# TODO: Take in parameters and remove all "*".
# TODO: There shouldn't be a global CI boundary, we want to have a boundary per application team.
# Naming standard: <application>-<environment>-<resource-name>
AWSTemplateFormatVersion: "2010-09-09"
Resources:
  User:
    Type: AWS::IAM::User
    Properties:
      PermissionsBoundary: !Ref PermissionBoundary
  AllowPolicySimulatorPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows user of the IAM Policy Simulator.
      Users:
        - !Ref User
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowIAMPolicySimulator
            Effect: Allow
            Action:
              - iam:GetGroupPolicy
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:GetUser
              - iam:GetUserPolicy
              - iam:ListAttachedUserPolicies
              - iam:ListGroupPolicies
              - iam:ListGroupsForUser
              - iam:ListUserPolicies
              - iam:ListUsers
              - iam:ListPolicies
              - iam:SimulatePrincipalPolicy
            Resource:
              - "*"
  AllowServerlessCIPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows deployment of Serverless applications.
      Users:
        - !Ref User
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowCloudFormationDeployment
            Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResources
              - cloudformation:DescribeStacks
              - cloudformation:GetTemplate
              - cloudformation:ListStackResources
              - cloudformation:UpdateStack
              - cloudformation:ValidateTemplate
              - cloudformation:DeleteStack
            Resource:
              - "*"
          - Sid: AllowS3ListBucketOnServerlessBucket
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:PutBucketPolicy
              - s3:ListBucketVersions
              - s3:PutAccelerateConfiguration
              - s3:GetEncryptionConfiguration
              - s3:PutEncryptionConfiguration
              - s3:DeleteBucketPolic
              - s3:ListBucket
            Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref ServerlessDeploymentBucket]]
          - Sid: AllowS3PutObjectOnServerlessBucket
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Join [
                  "",
                  ["arn:aws:s3:::", !Ref ServerlessDeploymentBucket, "/*"],
                ]
          - Sid: AllowLambdaCreation
            Effect: Allow
            Action:
              - lambda:Get*
              - lambda:List*
              - lambda:CreateFunction
              - lambda:DeleteFunction
            Resource:
              - "*"
          - Sid: AllowLambdaIAMRoleCreation
            Effect: Allow
            Action:
              - iam:GetRole
              - iam:CreateRole
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:DeleteRole
            Resource:
              - "*" #TODO: Update this to be reduced to the Lambda role.
          - Sid: AllowPassRoleToLambda
            Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - arn:aws:iam:::role/*
            #Condition:
              #StringEquals:
                #iam:PassedToService: lambda.amazonaws.com
          - Sid: AllowAddPermission
            Effect: Allow
            Action:
              - lambda:AddPermission
              - lambda:CreateAlias
              - lambda:DeleteFunction
              - lambda:InvokeFunction
              - lambda:PublishVersion
              - lambda:RemovePermission
              - lambda:Update*
            Resource:
              - arn:aws:lambda:::function:*
          - Sid: AllowLogGroupCreation
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DeleteLogGroup
            Resource:
              - "*"
          - Sid: AllowAPIGatewayCreation
            Effect: Allow
            Action:
              - apigateway:GET
              - apigateway:POST
              - apigateway:PUT
              - apigateway:DELETE
              - apigateway:PATCH
            Resource:
              - arn:aws:apigateway:*::/apis*
              - arn:aws:apigateway:*::/restapis*
              - arn:aws:apigateway:*::/apikeys*
              - arn:aws:apigateway:*::/usageplans
  # PermissionBoundary has an explicit deny all. The boundary sets the maximum set of permissions.
  PermissionBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: global-ci-serverless-permission-boundary
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowIAMReadOnly
            Effect: Allow
            Action:
              - iam:Get*
              - iam:List*
              - iam:SimulatePrincipalPolicy
            Resource:
              - "*"
          - Sid: AllowServerlessServices
            Effect: Allow
            Action:
              - apigateway:*
              - cloudwatch:*
              - cognito-idp:*
              - dynamodb:*
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:Describe*
              - events:*
              - kms:*
              - lambda:*
              - logs:*
              - s3:*
              - schemas:*
              - sns:*
              - sqs:*
              - ssm:*
              - states:*
              - synthetics:*
              - xray:*
            Resource:
              - "*"
            Condition:
              StringEquals:
                aws:RequestedRegion:
                  - us-east-1 # Allow North Virginia for CloudFront.
                  - eu-west-1 # Europe.
          - Sid: DenyDynamoRowLevelActions
            Effect: Deny
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - "*"
          - Sid: AllowCloudFormationDeployment
            Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResources
              - cloudformation:DescribeStacks
              - cloudformation:GetTemplate
              - cloudformation:ListStackResources
              - cloudformation:UpdateStack
              - cloudformation:ValidateTemplate
              - cloudformation:DeleteStack
            Resource:
              - "*"
            Condition:
              StringEquals:
                aws:RequestedRegion:
                  - us-east-1 # Allow North Virginia for CloudFront.
                  - eu-west-1 # Europe.
          - Sid: AllowPassRoleToLambda
            Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - arn:aws:iam:::role/*
            #Condition:
              #StringEquals:
                #iam:PassedToService: lambda.amazonaws.com
          - Sid: ExplicitDenyPermBoundaryIAMPolicyAlteration
            Effect: Deny
            Action:
              - iam:CreatePolicyVersion
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
              - iam:SetDefaultPolicyVersion
            Resource:
              - arn:aws:iam:::policy/global-ci-serverless-permission-boundary
          - Sid: ExplicitDenyRemovalOfPermBoundaryFromAnyRole
            Effect: Deny
            Action:
              - iam:DeleteRolePermissionsBoundary
            Resource:
              - arn:aws:iam:::role/*
            Condition:
              StringEquals:
                iam:PermissionsBoundary: arn:aws:iam:::policy/global-ci-serverless-permission-boundary
          - Sid: AllowUpsertRoleIfPermBoundaryIsBeingApplied
            Effect: Allow
            Action:
              - iam:CreateRole
              - iam:PutRolePolicy
              - iam:PutRolePermissionsBoundary
            Resource:
              - "*"
            Condition:
              StringEquals:
                # The permission boundary needs to explitly provide the account.
                iam:PermissionsBoundary: !Sub 'arn:aws:iam:${AWS::AccountId}:policy/global-ci-serverless-permission-boundary'
          - Sid: AllowDeleteRole
            Effect: Allow
            Action:
              - iam:DeleteRolePolicy
              - iam:DeleteRole
            Resource:
              - "*"

  # Instead of using Serverless Framework to create a bucket, create your own so that we can control the policy more carefully.
  # This also reduces the number of buckets that are lying around.
  # The serverless.yaml can be configured to use this by adding a provider/deploymentBucket section.
  ServerlessDeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration: # Optional, can be used to reduce wasted storage if you don't need old versions to be retained.
        Rules:
          - AbortIncompleteMultipartUpload: # Abandon incomplete uploads after 7 days.
              DaysAfterInitiation: 7
            Status: Enabled
          - NoncurrentVersionExpirationInDays: 7 # Delete old versions of files after 7 days. Think about whether this meets your audit requirements.
            Status: Enabled
      PublicAccessBlockConfiguration: # Disallow public buckets.
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration: # Enable versioning.
        Status: Enabled
  ServerlessDeploymentBucketPolicy: # Policy to disable non HTTPS access, and enforce MFA delete.
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ServerlessDeploymentBucket
      PolicyDocument:
        Statement:
          - Sid: RequireTLS
            Effect: Deny
            Principal: "*"
            Action: "*"
            Resource:
              !Join ["", ["arn:aws:s3:::", !Ref ServerlessDeploymentBucket]]
            Condition:
              Bool:
                "aws:SecureTransport": false
          - Sid: RequireMFAForBucketDeletion
            Effect: Deny
            Principal: "*"
            Action:
              - s3:DeleteBucket
            Resource:
              !Join ["", ["arn:aws:s3:::", !Ref ServerlessDeploymentBucket]]
            Condition:
              "Null":
                "aws:MultiFactorAuthAge": true
Outputs:
  UserName:
    Description: The username of the CI user.
    Value: !Ref User
