---
# Global CI/CD permission boundary and Serverless deployment bucket per AWS account.
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Squad:
    Type: String
    Description: The name of the squad that this permission boundary is for. This ensures that each squad's CI user can only affect their own work.
Resources:
  # PermissionBoundary has an explicit deny all. The boundary sets the maximum set of permissions.
  ServerlessPermissionBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: serverless-permission-boundary
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowIAMReadOnly
            Effect: Allow
            Action:
              - iam:Get*
              - iam:List*
              - iam:SimulatePrincipalPolicy
            Resource:
              - "*"
          # These are for serverless services that need a * in resources as we do not know
          # the exact path of in advance e.g. api gateway. 
          - Sid: AllowServerlessServices
            Effect: Allow
            Action:
              - apigateway:*
              - cloudwatch:*
              - events:*
              - logs:*
              - states:*
              - xray:*
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:Describe* 
              # You might want to consider limiting squads to more granular restrictions for these services at the permission boundary level, depending on your use case.
              - schemas:*
              - sns:*
              - sqs:*
              - kms:*
              - synthetics:*
            Resource:
              - "*"
            Condition:
              StringEquals:
                aws:RequestedRegion:
                  - us-east-1 # Allow North Virginia for CloudFront.
                  - eu-west-1 # Europe.              
          - Sid: AllowS3
            Effect: Allow 
            Action: 
              - s3:*
            Resource: 
              - !Sub arn:aws:s3:::${Squad}*
          - Sid: AllowLambda
            Effect: Allow 
            Action: 
              - lambda:*
            Resource: 
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Squad}*              
          - Sid: AllowDynamo
            Effect: Allow 
            Action: 
              - dynamodb:*
            Resource: 
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Squad}*   
          - Sid: AllowSecretsManagerGetOnly
            Effect: Allow 
            Action: 
              - secretsmanager:GetSecretValue
            Resource: 
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Squad}*                          
          - Sid: AllowSSMParameters
            Effect: Allow 
            Action: 
              - ssm:*
            Resource: 
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter:${Squad}*                                
          - Sid: AllowCognito
            Effect: Allow 
            Action: 
              - cognito-idp:*
            Resource: 
              - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/:${Squad}*                                  
          - Sid: DenyDynamoRowLevelActions
            Effect: Deny
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - "*"
          - Sid: AllowCloudFormationDeployment
            Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResources
              - cloudformation:DescribeStackResource
              - cloudformation:DescribeStacks
              - cloudformation:GetTemplate
              - cloudformation:ListStackResources
              - cloudformation:UpdateStack
              - cloudformation:ValidateTemplate
              - cloudformation:DeleteStack
            Resource:
              - !Sub arn:aws:cloudformation:*:${AWS::AccountId}:stack/${Squad}-*
            Condition:
              StringEquals:
                aws:RequestedRegion:
                  - us-east-1 # Allow North Virginia for CloudFront.
                  - eu-west-1 # Europe.
          - Sid: AllowValidationOfAnyStack
            Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource:
              - "*"
            Condition:
              StringEquals:
                aws:RequestedRegion:
                  - eu-west-1 # Europe.
          - Sid: AllowPassRoleToLambda
            Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/${Squad}*
            Condition:
              StringEquals:
                iam:PassedToService: lambda.amazonaws.com
          - Sid: ExplicitDenyPermBoundaryIAMPolicyAlteration
            Effect: Deny
            Action:
              - iam:CreatePolicyVersion
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
              - iam:SetDefaultPolicyVersion
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:policy/${Squad}-permissions-boundary
          - Sid: ExplicitDenyRemovalOfPermBoundaryFromAnyRole
            Effect: Deny
            Action:
              - iam:DeleteRolePermissionsBoundary
            Resource:
              - arn:aws:iam:::role/*
            Condition:
              StringEquals:
                iam:PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/${Squad}-permissions-boundary
          - Sid: AllowUpsertRoleIfPermBoundaryIsBeingApplied
            Effect: Allow
            Action:
              - iam:CreateRole
              - iam:PutRolePolicy
              - iam:PutRolePermissionsBoundary
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:policy/${Squad}-*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/${Squad}-*
            Condition:
              StringEquals:
                # The permission boundary needs to explicitly provide the account.
                iam:PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/${Squad}-permissions-boundary
          - Sid: AllowDeleteRole
            Effect: Allow
            Action:
              - iam:DeleteRolePolicy
              - iam:DeleteRole
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/${Squad}-*

  # Instead of using Serverless Framework to create a bucket, create your own so that we can control the policy more carefully.
  # This also reduces the number of buckets that are lying around.
  # The serverless.yaml can be configured to use this by adding a provider/deploymentBucket section.
  ServerlessDeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration: # Optional, can be used to reduce wasted storage if you don't need old versions to be retained.
        Rules:
          - AbortIncompleteMultipartUpload: # Abandon incomplete uploads after 7 days.
              DaysAfterInitiation: 7
            Status: Enabled
          - NoncurrentVersionExpirationInDays: 7 # Delete old versions of files after 7 days. Think about whether this meets your audit requirements.
            Status: Enabled
      PublicAccessBlockConfiguration: # Disallow public buckets.
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration: # Enable versioning.
        Status: Enabled
  ServerlessDeploymentBucketPolicy: # Policy to disable non HTTPS access, and enforce MFA delete.
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ServerlessDeploymentBucket
      PolicyDocument:
        Statement:
          - Sid: RequireTLS
            Effect: Deny
            Principal: "*"
            Action: "*"
            Resource:
              !Join ["", ["arn:aws:s3:::", !Ref ServerlessDeploymentBucket]]
            Condition:
              Bool:
                "aws:SecureTransport": false
          - Sid: RequireMFAForBucketDeletion
            Effect: Deny
            Principal: "*"
            Action:
              - s3:DeleteBucket
            Resource:
              !Join ["", ["arn:aws:s3:::", !Ref ServerlessDeploymentBucket]]
            Condition:
              "Null":
                "aws:MultiFactorAuthAge": true

Outputs:
  ServerlessPermissionBoundary:
    Description: The global CI permission boundary.
    Value: !Ref ServerlessPermissionBoundary
    Export:
        Name: ServerlessPermissionBoundary
  ServerlessDeploymentBucket:
    Description: The global CI permission boundary.
    Value: !Ref ServerlessDeploymentBucket
    Export:
        Name: ServerlessDeploymentBucket
